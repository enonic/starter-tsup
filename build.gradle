plugins {
	id 'com.enonic.xp.app' version '3.4.0'
	id 'com.github.node-gradle.node' version '5.0.0'
}

app {
	name = "${appName}"
	displayName = "${appDisplayName}"
	vendorName = "${vendorName}"
	vendorUrl = "${vendorUrl}"
	systemVersion = "${xpVersion}"
}

dependencies {
	compileOnly "com.enonic.xp:core-api:${xpVersion}"
	compileOnly "com.enonic.xp:portal-api:${xpVersion}"

	// include "com.enonic.xp:lib-auditlog:${xpVersion}"
	// include "com.enonic.xp:lib-auth:${xpVersion}"
	// include "com.enonic.xp:lib-cluster:${xpVersion}"
	// include "com.enonic.xp:lib-common:${xpVersion}"
	// include "com.enonic.xp:lib-content:${xpVersion}"
	// include "com.enonic.xp:lib-event:${xpVersion}"
	// include "com.enonic.xp:lib-export:${xpVersion}"
	// include "com.enonic.xp:lib-grid:${xpVersion}"
	// include "com.enonic.xp:lib-mail:${xpVersion}"
	// include "com.enonic.xp:lib-scheduler:${xpVersion}"
	// include "com.enonic.xp:lib-value:${xpVersion}"
	// include "com.enonic.xp:lib-websocket:${xpVersion}"

	include "com.enonic.xp:lib-admin:${xpVersion}"
	include "com.enonic.xp:lib-app:${xpVersion}"
	include "com.enonic.xp:lib-context:${xpVersion}"
	include "com.enonic.xp:lib-i18n:${xpVersion}"
	include "com.enonic.xp:lib-io:${xpVersion}"
	include "com.enonic.xp:lib-node:${xpVersion}"
	include "com.enonic.xp:lib-portal:${xpVersion}"
	include "com.enonic.xp:lib-project:${xpVersion}"
	include "com.enonic.xp:lib-repo:${xpVersion}"
	include "com.enonic.xp:lib-schema:${xpVersion}"
	include "com.enonic.xp:lib-task:${xpVersion}"
	include "com.enonic.xp:lib-vhost:${xpVersion}"

	include 'com.enonic.lib:lib-mustache:2.1.1'
	include 'com.enonic.lib:lib-router:3.1.0'
	include 'com.enonic.lib:lib-static:1.0.3'
	include 'com.enonic.lib:lib-text-encoding:2.1.1'
	include 'com.enonic.lib:lib-thymeleaf:2.1.0'
	// include 'com.enonic.lib:lib-cache:2.2.0'
	// include 'com.enonic.lib:lib-util:3.0.0'
}

repositories {
	mavenLocal()
	mavenCentral()
	xp.enonicRepo()
}

node {
	// Whether to download and install a specific Node.js version or not
	// If false, it will use the globally installed Node.js
	// If true, it will download node using above parameters
	// Note that npm is bundled with Node.js
	download = true

	// Version of node to download and install (only used if download is true)
	// It will be unpacked in the workDir
	version = "16.20.0"
}

tasks.withType(Copy) {
	includeEmptyDirs = false
}

task npmTest(type: NpmTask) {
	args = [
		'run',
		'test'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
	]
}

task npmCheck(type: NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}

// If you ALWAYS want to SKIP test and check on development build comment in the if
// if (!(project.hasProperty('dev') || project.hasProperty('development'))) {
test.dependsOn npmTest
check.dependsOn npmCheck
// }

task npmBuild(type: NpmTask) {
	args = [
		'run',
		'--silent',
		project.hasProperty('minify') ? 'minify' : 'build'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
		'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
		'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
	]
	inputs.dir 'node_modules/react'
	inputs.dir 'node_modules/react-dom'
	inputs.dir 'src/main/resources'
	outputs.dir 'build/resources/main'
}

jar.dependsOn npmBuild

processResources {
	exclude '**/.gitkeep'
	exclude '**/*.json'
	exclude '**/*.sass'
	exclude '**/*.png'
	exclude '**/*.ts'
	exclude '**/*.tsx'
}
